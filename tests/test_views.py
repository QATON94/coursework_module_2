import datetime
import json
from unittest.mock import patch

import pandas as pd
import pytest

from src.views import greetings, get_num_card, get_top_transactions, get_exchange_rate, get_stock_prices


@pytest.fixture()
def test_transactions():
    file_transactions = [{
        'Дата операции': '20.07.2019 15:25:01',
        'Дата платежа': '22.07.2019',
        'Номер карты': '*4556',
        'Статус': 'OK',
        'Сумма операции': -5000.0,
        'Валюта операции': 'RUB',
        'Сумма платежа': -5000.0,
        'Валюта платежа': 'RUB',
        'Кэшбэк': 0,
        'Категория': 'Наличные',
        'MCC': 6011,
        'Описание': 'Снятие в банкомате Сбербанк',
        'Бонусы (включая кэшбэк)': 0,
        'Округление на инвесткопилку': 0,
        'Сумма операции с округлением': 5000.0
    },
        {
            'Дата операции': '19.07.2019 22:02:30',
            'Дата платежа': '21.07.2019',
            'Номер карты': '*7197',
            'Статус': 'OK',
            'Сумма операции': -149.0,
            'Валюта операции': 'RUB',
            'Сумма платежа': -149.0,
            'Валюта платежа': 'RUB',
            'Кэшбэк': 0,
            'Категория': 'Топливо',
            'MCC': 5541,
            'Описание': 'Circle K',
            'Бонусы (включая кэшбэк)': 2,
            'Округление на инвесткопилку': 0,
            'Сумма операции с округлением': 149.0
        },
        {
            'Дата операции': '19.07.2019 18:24:31',
            'Дата платежа': '20.07.2019',
            'Номер карты': '*7197',
            'Статус': 'OK',
            'Сумма операции': -1400.0,
            'Валюта операции': 'RUB',
            'Сумма платежа': -1400.0,
            'Валюта платежа': 'RUB',
            'Кэшбэк': 0,
            'Категория': 'Госуслуги',
            'MCC': 9311,
            'Описание': 'Госуслуги',
            'Бонусы (включая кэшбэк)': 28,
            'Округление на инвесткопилку': 0,
            'Сумма операции с округлением': 1400.0
        },
        {
            'Дата операции': '17.07.2019 15:05:27',
            'Дата платежа': '19.07.2019',
            'Номер карты': '*7197',
            'Статус': 'OK',
            'Сумма операции': -25.0,
            'Валюта операции': 'RUB',
            'Сумма платежа': -25.0,
            'Валюта платежа': 'RUB',
            'Кэшбэк': 0,
            'Категория': 'Дом и ремонт',
            'MCC': 5200,
            'Описание': 'OOO Nadezhda',
            'Бонусы (включая кэшбэк)': 0,
            'Округление на инвесткопилку': 0,
            'Сумма операции с округлением': 25.0
        },
        {
            'Дата операции': '17.07.2019 15:01:15',
            'Дата платежа': '19.07.2019',
            'Номер карты': '*7197',
            'Статус': 'OK',
            'Сумма операции': -27.0,
            'Валюта операции': 'RUB',
            'Сумма платежа': -27.0,
            'Валюта платежа': 'RUB',
            'Кэшбэк': 0,
            'Категория': 'Дом и ремонт',
            'MCC': 5200,
            'Описание': 'OOO Nadezhda',
            'Бонусы (включая кэшбэк)': 0,
            'Округление на инвесткопилку': 0,
            'Сумма операции с округлением': 27.0
        },
        {
            'Дата операции': '16.07.2019 16:30:10',
            'Дата платежа': '18.07.2019',
            'Номер карты': '*7197',
            'Статус': 'OK',
            'Сумма операции': -49.8,
            'Валюта операции': 'RUB',
            'Сумма платежа': -49.8,
            'Валюта платежа': 'RUB',
            'Кэшбэк': 0,
            'Категория': 'Супермаркеты',
            'MCC': 5411,
            'Описание': 'SPAR',
            'Бонусы (включая кэшбэк)': 0,
            'Округление на инвесткопилку': 0,
            'Сумма операции с округлением': 49.8
        },
        {
            'Дата операции': '16.07.2019 16:13:54',
            'Дата платежа': '17.07.2019',
            'Номер карты': '*7197',
            'Статус': 'OK',
            'Сумма операции': -114.0,
            'Валюта операции': 'RUB',
            'Сумма платежа': -114.0,
            'Валюта платежа': 'RUB',
            'Кэшбэк': 0,
            'Категория': 'Фастфуд',
            'MCC': 5814,
            'Описание': 'IP Yakubovskaya M. V.',
            'Бонусы (включая кэшбэк)': 2,
            'Округление на инвесткопилку': 0,
            'Сумма операции с округлением': 114.0
        }]
    return file_transactions


@pytest.mark.parametrize('time_day_str, expected', [('21.02.2021 19:40:55', 'Добрый вечер!'),
                                                    ('21.02.2021 01:40:55', 'Доброй ночи!'),
                                                    ('21.02.2021 6:40:55', 'Доброе утро!'),
                                                    ('21.02.2021 12:40:55', 'Добрый день!')])
def test_greetings(time_day_str, expected):
    time_day = datetime.datetime.strptime(time_day_str, format('%d.%m.%Y %H:%M:%S'))
    print(time_day)
    assert greetings(time_day) == expected


def test_get_num_card(test_transactions):
    return_func = get_num_card(test_transactions)
    assert return_func == {'*4556': [{'cashback': 0, 'last_digits': '*4556', 'total_spent': 5000.0}],
                           '*7197': [{'cashback': 0, 'last_digits': '*7197', 'total_spent': 1764.8}]}


def test_get_top_transactions(test_transactions):
    return_func = get_top_transactions(test_transactions)
    assert return_func == [{'MCC': 6011,
                            'Бонусы (включая кэшбэк)': 0,
                            'Валюта операции': 'RUB',
                            'Валюта платежа': 'RUB',
                            'Дата операции': '20.07.2019 15:25:01',
                            'Дата платежа': '22.07.2019',
                            'Категория': 'Наличные',
                            'Кэшбэк': 0,
                            'Номер карты': '*4556',
                            'Округление на инвесткопилку': 0,
                            'Описание': 'Снятие в банкомате Сбербанк',
                            'Статус': 'OK',
                            'Сумма операции': -5000.0,
                            'Сумма операции с округлением': 5000.0,
                            'Сумма платежа': -5000.0},
                           {'MCC': 9311,
                            'Бонусы (включая кэшбэк)': 28,
                            'Валюта операции': 'RUB',
                            'Валюта платежа': 'RUB',
                            'Дата операции': '19.07.2019 18:24:31',
                            'Дата платежа': '20.07.2019',
                            'Категория': 'Госуслуги',
                            'Кэшбэк': 0,
                            'Номер карты': '*7197',
                            'Округление на инвесткопилку': 0,
                            'Описание': 'Госуслуги',
                            'Статус': 'OK',
                            'Сумма операции': -1400.0,
                            'Сумма операции с округлением': 1400.0,
                            'Сумма платежа': -1400.0},
                           {'MCC': 5541,
                            'Бонусы (включая кэшбэк)': 2,
                            'Валюта операции': 'RUB',
                            'Валюта платежа': 'RUB',
                            'Дата операции': '19.07.2019 22:02:30',
                            'Дата платежа': '21.07.2019',
                            'Категория': 'Топливо',
                            'Кэшбэк': 0,
                            'Номер карты': '*7197',
                            'Округление на инвесткопилку': 0,
                            'Описание': 'Circle K',
                            'Статус': 'OK',
                            'Сумма операции': -149.0,
                            'Сумма операции с округлением': 149.0,
                            'Сумма платежа': -149.0},
                           {'MCC': 5814,
                            'Бонусы (включая кэшбэк)': 2,
                            'Валюта операции': 'RUB',
                            'Валюта платежа': 'RUB',
                            'Дата операции': '16.07.2019 16:13:54',
                            'Дата платежа': '17.07.2019',
                            'Категория': 'Фастфуд',
                            'Кэшбэк': 0,
                            'Номер карты': '*7197',
                            'Округление на инвесткопилку': 0,
                            'Описание': 'IP Yakubovskaya M. V.',
                            'Статус': 'OK',
                            'Сумма операции': -114.0,
                            'Сумма операции с округлением': 114.0,
                            'Сумма платежа': -114.0},
                           {'MCC': 5411,
                            'Бонусы (включая кэшбэк)': 0,
                            'Валюта операции': 'RUB',
                            'Валюта платежа': 'RUB',
                            'Дата операции': '16.07.2019 16:30:10',
                            'Дата платежа': '18.07.2019',
                            'Категория': 'Супермаркеты',
                            'Кэшбэк': 0,
                            'Номер карты': '*7197',
                            'Округление на инвесткопилку': 0,
                            'Описание': 'SPAR',
                            'Статус': 'OK',
                            'Сумма операции': -49.8,
                            'Сумма операции с округлением': 49.8,
                            'Сумма платежа': -49.8}]


def test_get_exchange_rate():
    with patch('requests.get') as mock_get:
        mock_get.return_value.json.return_value = {'Valute': {
            'USD': {'ID': 'R01235', 'NumCode': '840', 'CharCode': 'USD', 'Nominal': 1, 'Name': 'Доллар США',
                    'Value': 89.7619, 'Previous': 88.5819},
            'EUR': {'ID': 'R01239', 'NumCode': '978', 'CharCode': 'EUR', 'Nominal': 1, 'Name': 'Евро', 'Value': 97.9126,
                    'Previous': 96.8827}}
        }
        assert get_exchange_rate(["USD", "EUR"]) == [{'currency': 'USD', 'rate': 89.7619},
                                                     {'currency': 'EUR', 'rate': 97.9126}]


def test_get_stock_prices():
    with patch('requests.get') as mock_get:
        mock_get.return_value.json.return_value = [
            {'ticker': 'BETS', 'price': '0.0388',
             'change_amount': '0.0117',
             'change_percentage': '43.1734%',
             'volume': '414313708'},
            {'ticker': 'GGE',
             'price': '0.3049',
             'change_amount': '0.1217',
             'change_percentage': '66.4301%',
             'volume': '203385033'},
            {'ticker': 'SQQQ', 'price': '15.895', 'change_amount': '-0.125', 'change_percentage': '-0.7803%',
             'volume': '122722250'},
            {'ticker': 'TSLA', 'price': '238.83', 'change_amount': '-1.25', 'change_percentage': '-0.5207%',
             'volume': '120812848'},
            {'ticker': 'PFE', 'price': '28.8935', 'change_amount': '-1.5765', 'change_percentage': '-5.1739%',
             'volume': '103193120'},
            {'ticker': 'ALT', 'price': '3.57', 'change_amount': '0.41', 'change_percentage': '12.9747%',
             'volume': '100543793'}]
    assert get_stock_prices(['BETS', 'SQQQ'],None) == [{'price': '0.0388', 'stock': 'BETS'},
                                                  {'price': '15.895', 'stock': 'SQQQ'}]
